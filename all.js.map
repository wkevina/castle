{"version":3,"sources":["main.js"],"names":[],"mappings":"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","file":"all.js","sourcesContent":["///<reference path=\"../typings/tsd.d.ts\"/>\n/*jshint esnext: true */\n//import 'static/lib/helvetiker_regular.typeface/index';\n\nexport function main() {\n\n    const PANSPEED = 0.01;\n    const ZOOMSPEED = 0.05;\n\n    var zoom = 1.0;\n\n    function throttle(callback, delay) {\n        var timerId;\n        return function () {\n            if (timerId !== null) {\n                window.clearTimeout(timerId);\n            }\n            timerId = window.setTimeout(callback, delay);\n        };\n    }\n\n    window.addEventListener(\"resize\", throttle(render, 100));\n\n    // Set up the THREE context\n\n    var canvas = document.getElementsByTagName('canvas')[0];\n\n\n    var scene = new THREE.Scene();\n    var camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 1000);\n    camera.position.z = 20;\n\n    //document.body.appendChild(renderer.domElement);\n\n\n    //var geometry = new THREE.BoxGeometry(1, 1, 1);\n    //var material = new THREE.MeshBasicMaterial({\n    //\tcolor: 0xFFFFFF\n    //});\n    //var cube = new THREE.Mesh(geometry, material);\n    //scene.add(cube);\n    //\n    //var textGeometry = new THREE.TextGeometry(\"_castle_ experiment\", {\n    //\tsize: 1,\n    //\theight: 0.05,\n    //\tbevelThickness: 0.1,\n    //\tbevelSize: 0.1,\n    //\tbevelEnabled: false,\n    //\tmaterial: 0,\n    //\textrudeMaterial: 1\n    //});\n    //var textMaterial = new THREE.MeshBasicMaterial({\n    //\tcolor: 0xeecc88\n    //});\n    //var text = new THREE.Mesh(textGeometry, textMaterial);\n    //scene.add(text);\n    //\n\n    // get canvas so we can see our resolution\n\n    var geometry = new THREE.PlaneGeometry(2, 2);\n\n\n    var area = {\n        x1: -2,\n        y1: -1,\n        x2: 1,\n        y2: 1\n    };\n\n    var center = {x: 0, y: 0};\n\n    var viewUniform = {\n        type: 'm4',\n        value: null\n    };\n\n\n    var material = new THREE.ShaderMaterial({\n\n        vertexShader: document.getElementById('vertexShader').textContent,\n\n        fragmentShader: document.getElementById('fragmentShader').textContent,\n\n        uniforms: {\n            view: viewUniform\n        }\n\n    });\n\n    var plane = new THREE.Mesh(geometry, material);\n    scene.add(plane);\n\n    var renderer = new THREE.WebGLRenderer({\n        canvas: canvas\n    });\n\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    var oldw = canvas.clientWidth; //window.innerWidth;//\n    var oldh = canvas.clientHeight; //window.innerHeight;\n\n    renderer.setSize(Math.floor(oldw), Math.floor(oldh), false);\n    canvas.width = renderer.context.drawingBufferWidth;\n    canvas.height = renderer.context.drawingBufferHeight;\n\n    function render() {\n\n        renderer.setPixelRatio(window.devicePixelRatio);\n\n        var oldw = canvas.clientWidth; //window.innerWidth;//\n        var oldh = canvas.clientHeight; //window.innerHeight;\n\n        renderer.setSize(Math.floor(oldw), Math.floor(oldh), false);\n\n        canvas.width = renderer.context.drawingBufferWidth;\n        canvas.height = renderer.context.drawingBufferHeight;\n\n        viewUniform.value = getViewMatrix({\n            width: renderer.context.drawingBufferWidth,\n            height: renderer.context.drawingBufferHeight\n        }, area);\n\n        renderer.render(scene, camera);\n\n    }\n\n    requestAnimationFrame(render);\n    //requestAnimationFrame(render);\n\n    // aspect\n    // view = {x,y,w,h}\n    //\n    // test if aspect is larger than view's aspect\n    //\n    // if (aspect > view.h/view.w) # window is taller than view, scale depends on width only\n    // \treturn\n\n    // Matrix that will translate canvas coordinates to the\n    // interval[-width / 2, width / 2] and [-height / 2, height / 2]\n\n    // x' = x - w/2\n    // y' = y - h/2\n\n    // [ 1 - w/2 , -w/2   ]\n    // [ -h/2   , 1 - h/2 ]\n\n    function getViewMatrix(canvas, view) {\n\n        var width2 = canvas.width / 2;\n\n        var height2 = canvas.height / 2;\n\n        var translateIt = translate(-width2, -height2);\n        var scaleIt = getScale(canvas, view);\n\n        var offsetX = view.x1 + (view.x2 - view.x1) / 2;\n\n        var offsetY = view.y1 + (view.y2 - view.y1) / 2;\n\n        var shiftIt = translate(offsetX, offsetY);\n\n        var zoomIt = getZoom(zoom);\n\n        var temp = new THREE.Matrix4().multiply(scaleIt).multiply(translate(center.x, center.y));\n        var offsetShift = translate(temp.elements[12], temp.elements[13]);\n        console.log('offsetShift=' + JSON.stringify(offsetShift));\n        //console.log(temp.elements.slice(12));\n\n        //var final = shiftIt.multiply(scaleIt).multiply(translateIt);\n\n        //var final = shiftIt.multiply(zoomIt).multiply(scaleIt).multiply(translateIt);\n        var final = new THREE.Matrix4().multiply(offsetShift).multiply(zoomIt).multiply(shiftIt).multiply(scaleIt).multiply(translateIt);\n\n        return final;\n\n        //.multiply();\n    }\n\n\n    function translate(x, y) {\n        return new THREE.Matrix4().makeTranslation(x, y, 0);\n\n    }\n\n    // Returns a matrix that will scale canvas coordinates to lie in [-1,1] in x or y\n    function getScale(canvas, view) {\n        var viewWidth = (view.x2 - view.x1);\n        var viewHeight = (view.y2 - view.y1);\n\n        var viewAspect = viewHeight / viewWidth;\n\n        var scale;\n\n        if (canvas.height / canvas.width > viewAspect) {\n            scale = viewWidth / canvas.width;\n            //scale /= viewWidth;\n        } else {\n            scale = viewHeight / canvas.height;\n            //scale /= viewHeight;\n        }\n\n        return new THREE.Matrix4().makeScale(scale, scale, 1);\n    }\n\n    function getZoom(zoom) {\n        //zoom = 1 + Math.log(zoom);\n        return new THREE.Matrix4().makeScale(zoom, zoom, 1);\n    }\n\n    if (('ontouchstart' in window) ||\n        (navigator.maxTouchPoints > 0) ||\n        (navigator.msMaxTouchPoints > 0)) {\n        setupTouchEvents();\n    } else {\n        setupMouseEvents();\n    }\n\n    function setupTouchEvents() {\n        var hammer = new Hammer(document.getElementById('canvas'));\n        hammer.get('pan').set({direction: Hammer.DIRECTION_ALL});\n        hammer.get('pinch').set({enable: true});\n        hammer.get('tap').set({enable: true});\n        hammer.on('panstart panmove panend', function (ev) {\n            var json = JSON.stringify;\n            console.log('type=' + ev.type + 'dx=' + ev.deltaX + ' dy=' + ev.deltaY + ' center=' + json(ev.center) + ' direction=' + ev.direction + ' offsetDirection=' + ev.offsetDirection)\n            pan(ev);\n        });\n        hammer.on('tap', function(ev){\n            animate.stop = true;\n        });\n        hammer.on('pinchstart pinch', function (ev) {\n            pinch(ev);\n        })\n    }\n\n    function setupMouseEvents() {\n        var throttle = function (type, name, obj) {\n            obj = obj || window;\n            var running = false;\n            var func = function (event) {\n                if (running) {\n                    return;\n                }\n                running = true;\n                requestAnimationFrame(function () {\n                    obj.dispatchEvent(new CustomEvent(name, {detail: event}));\n                    running = false;\n                });\n                //event.preventDefault();\n            };\n            obj.addEventListener(type, func);\n        };\n\n        /* init - you can init any event */\n        throttle(\"wheel\", \"optimizedScroll\");\n    }\n\n    var vel_x = 0.0;\n    var vel_y = 0.0;\n\n    function animate(time) {\n\n        if (animate.stop)\n            return;\n\n        var diff;\n\n        if (animate.start) {\n            animate.time = time;\n            diff = 1/60.0;\n        } else {\n            diff = time - animate.time;\n            animate.time = time;\n        }\n\n        center.x += vel_x*zoom*diff;\n        center.y -= vel_y*zoom*diff;\n        vel_x *= 0.9;\n        vel_y *= 0.9;\n\n        if (vel_y*vel_y + vel_x*vel_x > 0.1) {\n            requestAnimationFrame(render);\n            requestAnimationFrame(animate);\n        }\n    }\n    animate.start = true;\n\n    function pan(ev) {\n        if (ev.type == \"panstart\") {\n            pan.centerCopy = {x: center.x, y: center.y};\n            animate.stop = true;\n        }\n\n        if (ev.type == \"panend\") {\n            animate.start = true;\n            animate.stop = false;\n            requestAnimationFrame(animate);\n            return;\n        }\n\n        center.x = pan.centerCopy.x - ev.deltaX*zoom;\n        center.y = pan.centerCopy.y + ev.deltaY*zoom;\n        requestAnimationFrame(render);\n\n        vel_x = ev.velocityX*1000;\n        vel_y = ev.velocityY*1000;\n    }\n\n    function pinch(ev) {\n        if (ev.type == 'pinchstart') {\n            pinch.zoom = zoom; // copy current state\n            pinch.scale = ev.scale;\n        }\n        zoom = pinch.zoom / ev.scale;\n        requestAnimationFrame(render);\n    }\n\n    //(function() {\n    //\tvar throttle = function(type, name, obj) {\n    //\t\tobj = obj || window;\n    //\t\tvar running = false;\n    //\t\tvar func = function(event) {\n    //\t\t\tif (running) {\n    //\t\t\t\treturn;\n    //\t\t\t}\n    //\t\t\trunning = true;\n    //\t\t\trequestAnimationFrame(function() {\n    //\t\t\t\tobj.dispatchEvent(new CustomEvent(name, {detail:event}));\n    //\t\t\t\trunning = false;\n    //\t\t\t});\n    //\t\t\t//event.preventDefault();\n    //\t\t};\n    //\t\tobj.addEventListener(type, func);\n    //\t};\n    //\n    //\t/* init - you can init any event */\n    //\tthrottle(\"wheel\", \"optimizedScroll\");\n    //})();\n\n\n    // handle event\n    window.addEventListener(\"optimizedScroll\", function (event) {\n\n        var wheel = event.detail;\n\n        if (!wheel.shiftKey) { // PAN\n\n            var deltaX = wheel.deltaX;\n            var deltaY = wheel.deltaY;\n\n            center.x += deltaX * zoom;\n            center.y -= deltaY * zoom;\n\n        } else { // ZOOM\n            if (wheel.deltaY > 0)\n                zoom *= (1 + ZOOMSPEED);\n            else\n                zoom *= (1 - ZOOMSPEED);\n        }\n\n        requestAnimationFrame(render);\n\n    });\n\n}\n"],"sourceRoot":"/source/"}